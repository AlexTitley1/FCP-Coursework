def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-beta', type=float, default=0.2, help='Coupling coefficient')
    parser.add_argument('-threshold', type=float, default=0.2, help='Opinion difference threshold')
    parser.add_argument('-defuant', action='store_true', help='Run the Deffuant model')
    parser.add_argument('-ising_model', action='store_true', help='Run the ising model simulation using default settings.')
    parser.add_argument('-external', type=float, default=0.0, help='Set the strength of the external influence on the model.')
    parser.add_argument('-alpha', type=float, default=1.0, help='Set the alpha value used in the agreement calculation.')
    parser.add_argument('-test_ising', action='store_true', help='Run the ising model test functions to ensure integrity.')
    parser.add_argument("-network", type=int)
    parser.add_argument("-test_network", action = "store_true")
    parser.add_argument('-use_network', type=int, default=10, help='Size of the network')
    parser.add_argument('-size', type=int, default=20, help='Number of nodes in the network')
    parser.add_argument('-steps', type=int, default=1000, help='Number of simulation steps')
    parser.add_argument('-temperature', type=float, default=2.0, help='Temperature for the Ising model')
    parser.add_argument('-neighborhood', type=int, default=2, help='Each node is connected to `neighborhood` nearest neighbors')
    parser.add_argument('-rewiring_probability', type=float, default=0.1, help='Probability to rewire each edge')
    parser.add_argument('-ising_model', action='store_true', help='Run the Ising model simulation.')
    parser.add_argument('-use_network', type=int, help='Size of the network if using network model')
    
    args = parser.parse_args()
    net = Network()
    if args.defuant:
        defuant(args.beta, args.threshold)
    elif args.alpha <= 0:
        parser.error("The alpha parameter must be greater than 0.")
    elif args.test_ising:
        test_ising()
    elif args.ising_model:
        population = np.random.choice([-1, 1], size=(100, 100))
        ising_main(population, args.alpha, args.external)
    elif args.test_network:
        test_network()
    elif args.network:
        network=Network()
        network.make_random_network(args.network, 0.3) 
    elif args.use_network:
        network = Network(args.use_network)
        network.make_small_world(args.neighborhood, args.rewiring_probability)
        ising_model(network, args.steps, args.temperature)
        network.visualize()
    elif args.ising_model:
        # Implement grid-based Ising model here if needed
        print("Grid-based Ising model not implemented.")        
if __name__ == '__main__':
    main()
